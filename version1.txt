<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Annotator Bias Study</title>
  <style>
    /* Basic styling for layout */
    body {
      font-family: sans-serif;
      padding: 20px;
      background: #f9f9f9;
    }

    /* Login and annotation sections are hidden/shown dynamically */
    #login-section, #annotation-section {
      max-width: 700px;
      margin: auto;
      display: none;
    }

    /* Translation candidate card styling */
    .card {
      border: 1px solid #ccc;
      padding: 12px;
      margin: 10px 0;
      border-radius: 8px;
      cursor: pointer;
    }

    .card:hover {
      background: #eef;
    }

    .selected {
      background-color: #d0f0d0 !important;
    }

    /* Tooltip for word-by-word examples */
    .tooltip {
      display: inline-block;
      border-bottom: 1px dotted black;
      cursor: help;
    }

    /* Progress bar styling */
    .progress-bar {
      height: 20px;
      background: #ddd;
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 20px;
    }

    .progress {
      height: 100%;
      background: #4caf50;
      width: 0%;
    }

    /* Basic button styling */
    button {
      padding: 10px 15px;
      margin-top: 10px;
    }

    /* Timer UI */
    .timer {
      float: right;
      font-size: 14px;
      color: #888;
    }
  </style>
</head>
<body>

<!-- Login section for annotator to enter ID -->
<div id="login-section">
  <h2>Login</h2>
  <input type="text" id="annotator-id" placeholder="Enter your ID" />
  <button onclick="startSession()">Start</button>
</div>

<!-- Main annotation interface -->
<div id="annotation-section">
  <div class="progress-bar">
    <div class="progress" id="progress"></div>
  </div>
  <div class="timer" id="timer">Time: 0s</div>

  <h3>Language A Sentence:</h3>
  <p id="source-sentence"></p>

  <h4>Word-by-Word Translation:</h4>
  <ul id="word-help"></ul>

  <h4>Candidate Translations:</h4>
  <div id="translation-options"></div>

  <h4>Suggest your own translation (optional):</h4>
  <textarea id="custom-translation" rows="3" style="width:100%;"></textarea>

  <!-- Buttons to go to next sentence and export annotations -->
  <button onclick="nextSentence()">Next</button>
  <button onclick="downloadAnnotations()">Download Annotations</button>
</div>

<script>
  // Sample sentences (you can expand or load from JSON/API)
  const sentences = [
    {
      source: "Същността на знанието е...",
      words: [
        { word: "Същността", meaning: "Essence", example: "Същността на живота..." },
        { word: "на", meaning: "of", example: "" },
        { word: "знанието", meaning: "knowledge", example: "Знанието е сила." }
      ],
      candidates: [
        "The essence of knowledge is...",
        "Knowledge has its essence in...",
        "The core of knowledge lies in..."
      ]
    },
    // Add more sentence objects here
  ];

  let currentIndex = 0;
  let timerInterval;
  let timeSpent = 0;

  // Called when annotator logs in
  function startSession() {
    const id = document.getElementById("annotator-id").value;
    if (!id) return alert("Please enter an ID.");
    localStorage.setItem("annotatorId", id);
    document.getElementById("login-section").style.display = "none";
    document.getElementById("annotation-section").style.display = "block";
    loadSentence();
    startTimer();
  }

  // Load the current sentence and associated data
  function loadSentence() {
    const sentence = sentences[currentIndex];
    document.getElementById("source-sentence").innerText = sentence.source;

    // Show word-by-word help with tooltip examples
    const wordHelp = document.getElementById("word-help");
    wordHelp.innerHTML = "";
    sentence.words.forEach(({ word, meaning, example }) => {
      const li = document.createElement("li");
      li.innerHTML = `<span class="tooltip" title="${example || 'No example'}">${word}</span> → ${meaning}`;
      wordHelp.appendChild(li);
    });

    // Show candidate translations
    const options = document.getElementById("translation-options");
    options.innerHTML = "";
    sentence.candidates.forEach((candidate, i) => {
      const div = document.createElement("div");
      div.className = "card";
      div.innerText = candidate;
      div.onclick = () => {
        document.querySelectorAll(".card").forEach(c => c.classList.remove("selected"));
        div.classList.add("selected");
        div.setAttribute("data-selected", "true");
      };
      options.appendChild(div);
    });

    // Reset progress and timer
    updateProgress();
    document.getElementById("custom-translation").value = "";
    resetTimer();
  }

  // Called when "Next" is clicked — saves current annotation and goes to next
  function nextSentence() {
    saveAnnotation();
    if (currentIndex < sentences.length - 1) {
      currentIndex++;
      loadSentence();
    } else {
      alert("Done! All sentences annotated.");
      location.reload();
    }
  }

  // Save annotation data to localStorage
  function saveAnnotation() {
    const id = localStorage.getItem("annotatorId");
    const selected = document.querySelector(".card.selected");
    const custom = document.getElementById("custom-translation").value;
    const annotation = {
      sentenceIndex: currentIndex,
      selected: selected ? selected.innerText : null,
      custom,
      timeSpent
    };
    localStorage.setItem(`annotation_${id}_${currentIndex}`, JSON.stringify(annotation));
  }

  // Update progress bar
  function updateProgress() {
    const percent = ((currentIndex + 1) / sentences.length) * 100;
    document.getElementById("progress").style.width = `${percent}%`;
  }

  // Start the timer for each sentence
  function startTimer() {
    timerInterval = setInterval(() => {
      timeSpent++;
      document.getElementById("timer").innerText = `Time: ${timeSpent}s`;
    }, 1000);
  }

  // Reset the timer for next sentence
  function resetTimer() {
    clearInterval(timerInterval);
    timeSpent = 0;
    startTimer();
  }

  // Export all saved annotations for this annotator as JSON
  function downloadAnnotations() {
    const id = localStorage.getItem("annotatorId");
    if (!id) return alert("No annotator ID found.");

    const annotations = [];

    for (let i = 0; i < sentences.length; i++) {
      const data = localStorage.getItem(`annotation_${id}_${i}`);
      if (data) {
        annotations.push(JSON.parse(data));
      }
    }

    const blob = new Blob([JSON.stringify(annotations, null, 2)], {
      type: "application/json"
    });

    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `annotations_${id}.json`;
    a.click();
    URL.revokeObjectURL(url);
  }

  // On load, show login screen
  document.getElementById("login-section").style.display = "block";
</script>

</body>
</html>
